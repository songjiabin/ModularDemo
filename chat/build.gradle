if (rootProject.ext.isAloneRun.isNeedChatModule) {
    //当作为单独的项目的时候 为 application
    apply plugin: 'com.android.application'
} else {
    //当不是单独运行的时候，作为一个library
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]



    defaultConfig {
        //当作为一个单独的项目的时候，有自己的id
        if (rootProject.ext.isAloneRun.isNeedChatModule) {
            applicationId "jzm.jeno.com.chat"
        }
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

     resourcePrefix "chat_"
    //如果在 library 的 build.gradle 中添加 resourcePrefix ，则所有资源必须以此 prefix 开头，否则会报错。


    // 配置当作为单独运行的一个项目审核，需要配置执行路径代码
    sourceSets {
        main {
            if (rootProject.ext.isAloneRun.isNeedChatModule) {
                manifest.srcFile 'src/main/runalone/AndroidManifest.xml'
                java.srcDirs = ['src/main/java', 'src/main/runalone/java']
                res.srcDirs = ['src/main/res', 'src/main/runalone/res']
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }


}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation rootProject.ext.dependencies["appcompat-v7"]
    implementation rootProject.ext.dependencies["constraint-layout"]
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["test:runner"]
    androidTestImplementation rootProject.ext.dependencies["espresso-core"]
    implementation project(':commonlib')

    //引入Arouter
    api rootProject.ext.dependencies["arouter-api"]
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]


}
